float4x4 World;
float4x4 View;
float4x4 Projection;
float3 LightDirection;
float3 CameraPosition;

texture heightMap;
sampler heightMapSampler = sampler_state
{
	texture = <heightMap>;
	MinFilter = POINT;
	MagFilter = POINT;
	MipFilter = POINT;
	AddressU = Wrap;
	AddressV = Wrap;
};

struct VS_IN
{
	float4 Position : POSITION0;
	float2 UV : TEXCOORD0;
	float3 Normal : NORMAL0;
	//float3 Tangent : TANGENT0;

};
struct VS_OUT
{
	float4 Position : POSITION0;
	float2 UV : TEXCOORD0;
	float3 Normal : TEXCOORD1;
	float3 ViewDirection : TEXCOORD2;
	float3 Light : TEXCOORD3;
};
VS_OUT VS_Color(VS_IN input)
{
	VS_OUT output = (VS_OUT)0;

	float4 worldPosition = mul(input.Position, World);
	float4x4 viewProjection = mul(View, Projection);

	/*float3x3 worldToTangentSpace;
	worldToTangentSpace[0] = mul(input.Tangent, World);
	worldToTangentSpace[1] = mul(cross(input.Tangent, input.Normal), World);
	worldToTangentSpace[2] = mul(input.Normal, World);*/

	output.Position = mul(worldPosition, viewProjection);
	output.UV = input.UV;	
	output.Normal = mul(input.Normal, World);
	//output.Light = mul(worldToTangentSpace, LightDirection);
	output.ViewDirection = CameraPosition - mul(input.Position, World);	// worldPosition - CameraPosition;

	return output;
}
float4 PS_Color(VS_OUT input) : COLOR0
{	
	float4 color = float4(1, 1, 1, 1);	

	color *= saturate(tex2D(heightMapSampler, input.UV));

	return color;
}
technique t0
{
	pass p0
	{
		FILLMODE = WIREFRAME;
		//CULLMODE = NONE;
		VertexShader = compile vs_3_0 VS_Color();
		PixelShader = compile ps_3_0 PS_Color();
	}
}